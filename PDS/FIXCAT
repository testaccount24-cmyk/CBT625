/*============================ REXX =================================*/
/*                                                                   */
/*        This REXX will attempt to read the output file from a      */
/*   LISTCAT command and then uncatalog and recatalog all the files  */
/*   listed. The files will be recataloged to the same pack name as  */
/*   they were originally cataloged on.  The purpose of this was to  */
/*   change the cataloging of all files on a list of 3380 packs to   */
/*   3390 packs when moving to a new data center.  The LISTCAT was   */
/*   for just the 3380 packs and it did what was expected of it.     */
/*   The program may not handle all possible file types, but it be   */
/*   fairly easy to make the changes needed for them                 */
/*                                                                   */
/*        Under ISPF the input and output file names may either      */
/*   be requested by the program or entered as arguments on the      */
/*   command line.  Otherwise, it expects the input to be in the     */
/*   DDNAME INPUT and the output will go to the DDNAME OUTPUT so     */
/*   that it can easily be run in batch mode.                        */
/*                                                                   */
/*===================================================================*/

     /* Don't run the allocation code if we're in ISPF mode          */
IF SYSVAR('SYSISPF') ¬= 'ACTIVE' THEN SIGNAL NOALLOC

     /* Get the possible argument from the command line              */
PARSE UPPER ARG INPUT                      /* Get input line         */
     /* If none was supplied ask for one and get it interactively    */
IF LENGTH(INPUT) < 1 THEN DO               /* If none, ask operator. */
  SAY 'Enter name on INPUT file containing catalog listing.'
  PARSE PULL INPUT
  IF LENGTH(INPUT) < 1 THEN DO             /* Blank line terminates  */
    SAY 'PROGRAM TERMINATED BY TERMINAL INPUT.'
    EXIT 4
    END
  END

     /* Parse the input file name from the received argument         */
PARSE VAR INPUT NAME INPUT                 /* Get inputted file name */
SAY 'INPUT file name found as' NAME'.'
     /* Attempt to allocate the input file and die if not good       */
"ALLOC F(INPUT) DA("NAME") SHR REU"
LASTCC = RC
IF LASTCC ¬= 0 THEN DO
  SAY 'UNABLE TO OPEN INPUT FILE, RETURN CODE WAS' LASTCC'.'
  EXIT 4
  END

     /* If we're out of arguments, get the output file name          */
IF LENGTH(INPUT) < 1 THEN DO
  SAY 'Enter name of OUPUT file for IDCAMS control statements.'
  PARSE PULL INPUT
  IF LENGTH(INPUT) < 1 THEN DO             /* Blank line terminates  */
    SAY 'PROGRAM TERMINATED BY TERMINAL INPUT.'
    EXIT 4
    END
  END

     /* Get the output file name from the received argument          */
PARSE VAR INPUT NAME INPUT                 /* Get inputted file name */
SAY 'OUTPUT file name found as' NAME'.'
     /* Allocate the output file name and die if unable to do so     */
IF INPUT ¬= '*' THEN DO
  "ALLOC F(OUTPUT) DA("NAME") SHR REU"
  LASTCC = RC
  IF LASTCC ¬= 0 THEN DO
    SAY 'UNABLE TO OPEN OUTPUT FILE, RETURN CODE WAS' LASTCC'.'
    EXIT 4
    END
  END

     /* End up here if no allocations or after allocating in and out */
NOALLOC:   ,

     /* Define the cataloging to be to a 3390 pack and print start   */
NV = '3390'
SAY 'Starting processing of input file.  DEVT of new vol will be' NV'.'

     /* Initialize variables and counts to avoid problems            */
NAME = ''
TYPE = ''
LINEAR = ''
READCD = 0
NREC = 0
NONNUM = 0
VNUM = 0
OUTCOUNT = 0
FNAME = ''
CNAME = ''
INAME = ''
DNAME = ''
VOLS = ''

     /* Now process the entire input file                            */
DO WHILE READCD = 0

  'EXECIO 1 DISKR INPUT'                   /* Read another record    */
  READCD = RC                              /* And remember RC        */
  IF READCD ¬= 0 THEN LEAVE                /* Leave at end or problem*/
  NREC = NREC + 1                          /* Count another record   */

  PARSE PULL LINE                          /* Get input off stack    */
  LINE = SUBSTR(LINE,2)                    /* Go beyond slew char    */
  ONE = WORD(LINE,1)                       /* Check the first word   */
     /* Mark linear files so they can be properly recataloged        */
  IF POS('LINEAR',LINE) > 0 THEN LINEAR = 'LINEAR '
     /* If this is for a NONVSAM file set up the variables           */
  IF ONE = 'NONVSAM' THEN DO
    IF LENGTH(CNAME) > 0 THEN CALL VSAMOUT
    FNAME = WORD(LINE,3)
    CNAME = ''
    INAME = ''
    DNAME = ''
    VOLS = ''
    END
     /* If this is the VOLSER definition, go ahead and recatalog     */
  ELSE IF LEFT(ONE,8) = 'VOLSER--' THEN DO
    IF LENGTH(FNAME) > 0 THEN DO
      VOL = RIGHT(WORD(LINE,1),6)
     /* If output goes to teh terminal, send it there                */
      IF NAME = '*' THEN DO
        SAY 'DELETE' FNAME 'NSCR'
        SAY 'DEFINE NVSAM (NAME('FNAME') VOL('VOL') DEVT('NV'))'
        END
     /* Or else go to the defined output file                        */
      ELSE DO
        L1 = ' DEFINE NVSAM (NAME('FNAME') VOL('VOL') DEVT('NV'))'
     /* If we need 2 lines, set them up                              */
        IF LENGTH(L1) > 68 THEN DO
          NOUT = 3
          PUSH '       VOL('VOL') DEVT('NV'))'
          PUSH ' DEFINE NVSAM (NAME('FNAME') -'
          END
     /* Or else we can put the define on 1 line                      */
        ELSE DO
          PUSH L1
          NOUT = 2
          END
     /* Now push the delete command itself                           */
        PUSH ' DELETE' FNAME 'NSCR'
     /* And write the commands to the file and check results         */
        EXECIO NOUT DISKW OUTPUT
        HOLDRC = RC
        IF RC ¬= 0 THEN DO
          SAY 'Return code from writing to output file was' HOLDRC'.'
          EXIT 8
          END
     /* Reset the LINEAR variable for the next file if needed        */
        LINEAR = ''
        END
     /* Count files and output records created and reset file name   */
      NONNUM = NONNUM + 1
      OUTCOUNT = OUTCOUNT + NOUT
      FNAME = ''
      END
     /* If there is a cluster name, check for an associated volume   */
    ELSE IF LENGTH(CNAME) > 0 THEN DO
      VOL = RIGHT(WORD(LINE,1),6)
      IF POS(VOL,VOLS) = 0 THEN VOLS = VOLS VOL
      END
    END
     /* If this is a cluster defining line record the name           */
  ELSE IF ONE = 'CLUSTER ' THEN DO
    IF LENGTH(CNAME) > 0 THEN CALL VSAMOUT
    IF LEFT(WORD(LINE,3),4) ¬= '0000' THEN CNAME = WORD(LINE,3)
    SAY 'CLUSTER FOUND' CNAME
    END
     /* Record the association data if there was a cluster named     */
  ELSE IF ( ONE = 'ASSOCIATIONS ' ) & ( LENGTH(CNAME) > 0 ) THEN DO
    'EXECIO 1 DISKR INPUT'
    HOLDRC = RC
    IF HOLDRC ¬= 0 THEN DO
      SAY 'Return code from DATA association read was' HOLDRC'.'
      RETURN
      END
    PARSE PULL LINE
    IF LEFT(WORD(LINE,1),9) = 'DATA-----' THEN DO
      DNAME = SUBSTR(WORD(LINE,1),10)
      'EXECIO 1 DISKR INPUT'
      HOLDRC = RC
      IF HOLDRC ¬= 0 THEN DO
        SAY 'Return code from INDEX association read was' HOLDRC'.'
        RETURN
        END
      PARSE PULL LINE
      IF LEFT(WORD(LINE,1),9) = 'INDEX----' THEN ,
                 INAME = SUBSTR(WORD(LINE,1),10)
      END
    END
     /* After the end of the input file, we'e done for this run      */
  END

     /* If the last file was a VSAM file make sure we treat it       */
IF LENGTH(CNAME) > 0 THEN CALL VSAMOUT

     /* Now print out the counters in case anyone is interested      */
SAY 'End of file after' NREC 'records.'
SAY NONNUM 'non VSAM files were done in' OUTCOUNT 'records.'
SAY VNUM 'VSAM files were found.'

     /* At the end, close out the output file gracefully             */
'EXECIO 0 DISKR INPUT ( FINIS'             /* At end, close file     */
HOLDRC = RC
IF HOLDRC = 0 THEN DO
  SAY 'Input file successfully closed.'
  END
ELSE DO
  SAY 'CLOSE of input file failed with a return code of' HOLDRC'.'
  END

     /* Return to do something else                                  */
RETURN

/*       E N D   O F   M A I N   P R O G R A M                       */

/*          S T A R T   O F   V S A M O U T   R O U T I N E          */

/*============================ REXX =================================*/
/*                                                                   */
/*        This routine will catalog a VSAM file and with its data    */
/*   and cluster components.  It was written as an add on to the     */
/*   main program after all the other things in the main program     */
/*   were working, and it handled all the files on the packs that    */
/*   had to be converted, although nothing was ever done on the      */
/*   order of an exhaustive test.  Should any problems arise, the    */
/*   skeleton can probably be changed slightly to handle the case    */
/*   but that should be noted here.                                  */
/*                                                                   */
/*===================================================================*/

     /* Catalog a VSAM file with date and cluster if not linear      */
VSAMOUT:   ,
     /* Assume that SYS1.VVDS will have already been set up          */
  IF LEFT(CNAME,10) = 'SYS1.VVDS.' THEN RETURN
     /* Start with things set to zero                                */
  DASH = ' '
  NOUT = 0
     /* Now make an output line for all existing options and count   */
  IF LENGTH(INAME) > 0 THEN DO
    L1 = '      INDEX(NAME('INAME'))'
    DASH = '-'
    PUSH L1
/*  SAY L1                               */
    NOUT = 1
    END
  IF LENGTH(DNAME) > 0 THEN DO
    L1 = '      DATA(NAME('DNAME'))' DASH
    PUSH L1
    END
/*SAY L1                                 */
  NOUT = NOUT + 1
  L1 = '      VOLUME('VOLS ') RECATALOG' LINEAR') -'
/*SAY L1                                 */
  PUSH L1
  NOUT = NOUT + 1
  L1 = ' DEFINE CLUSTER(NAME('CNAME') -'
  PUSH L1
/*SAY L1                                 */
  NOUT = NOUT + 1
     /* Put the DELETE NSCR first in the output queue                */
  L1 = ' DELETE' CNAME 'NSCR'
  PUSH L1
/*SAY L1                                 */
  NOUT = NOUT + 1
     /* Now write all the lines to the output file and check return  */
  'EXECIO' NOUT 'DISKW OUTPUT'
  HOLDRC = RC
  IF RC ¬= 0 THEN DO
    SAY 'Return code from writing to output file was' HOLDRC'.'
    EXIT 8
    END

     /* Increase all the necessary counts and reset the variables    */
  VNUM = VNUM + 1
  OUTCOUNT = OUTCOUNT + NOUT
  CNAME = ''
  INAME = ''
  DNAME = ''
  VOLS = ''
  LINEAR = ''

     /* Our work here is done and we can return                      */
  RETURN

/*         E N D   O F   V S A M O U T   S U B R O U T I N E         */

